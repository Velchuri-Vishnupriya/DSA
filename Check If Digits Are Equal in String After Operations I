//Using O(n) space
//T.C: O(n^2)
//S.C: O(n)
class Solution {
public:
    bool hasSameDigits(string s) {
        string temp = s;
        while(temp.length() > 2){//n
            string newTemp = "";
            for(int i = 0; i < temp.length(); i++){
                if(i < temp.length() && i+1 < temp.length()){
                    int a = temp[i] - '0';
                    int b = temp[i+1] - '0';
                    int c = (a + b)%10;
                    newTemp += (c + '0');
                }
            }
            temp = newTemp;
        }
        if(temp.length() < 2 || temp[0] != temp[1]) return false;
        return true;
    }
};

//Using constant space
//T.C: O(n^2)
//S.C: O(1)
class Solution {
public:
    bool hasSameDigits(string s) {
      int n = s.length();

      while(n > 2){
        for(int i = 0; i < n - 1; i++){
            s[i] = ((s[i] - '0') + (s[i+1] - '0')) % 10 + '0';
        }
        n--;
      }
    return s[0] == s[1];
    }
};
